#include <stdio.h>
#include <stdlib.h>
typedef struct {
    int source;
    int destination;
    int weight;
} Edge;
int compareEdges(const void* a, const void* b) {
    Edge* edge1 = (Edge*)a;
    Edge* edge2 = (Edge*)b;
    return (edge1->weight - edge2->weight);
}
int parent[10];
int rank[10];

void initializeUnionFind(int n) {
    for (int i = 0; i < n; i++) {
        parent[i] = i;
        rank[i] = 0;
    }
}

int find(int x) {
    if (parent[x] != x) {
        parent[x] = find(parent[x]);
    }
    return parent[x];
}

void unionSets(int x, int y) {
    int rootX = find(x);
    int rootY = find(y);

    if (rank[rootX] < rank[rootY]) {
        parent[rootX] = rootY;
    } else if (rank[rootX] > rank[rootY]) {
        parent[rootY] = rootX;
    } else {
        parent[rootY] = rootX;
        rank[rootX]++;
    }
}

void kruskalMST(Edge edges[], int n, int e) {
    qsort(edges, e, sizeof(Edge), compareEdges);
    initializeUnionFind(n);
    int totalWeight = 0;
    printf("Edges in MST:\n");

    for (int i = 0; i < e; i++) {
        int source = edges[i].source;
        int destination = edges[i].destination;
        int weight = edges[i].weight;

        if (find(source) != find(destination)) {
            unionSets(source, destination);
            totalWeight += weight;
            printf("%d - %d (weight: %d)\n", source, destination, weight);
        }
    }

    printf("Total weight of MST: %d\n", totalWeight);
}

int main() {
    int n;
    printf("Enter number of vertices: ");
    scanf("%d", &n);

    int e;
    printf("Enter number of edges: ");
    scanf("%d", &e);

    Edge edges[e];

    printf("Enter edges (source, destination, weight):\n");
    for (int i = 0; i < e; i++) {
        scanf("%d %d %d", &edges[i].source, &edges[i].destination, &edges[i].weight);
    }

    kruskalMST(edges, n, e);
    return 0;
}



